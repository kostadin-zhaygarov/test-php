<?php
/**
 * CreateSingleTransactionRequestFromAddressWithoutFeePriorityRI
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vaultody
 *
 * Vaultody
 *
 * The version of the OpenAPI document: 2023-04-20
 * Contact: developers@vaultody.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kocetestpack\Model;

use \ArrayAccess;
use \kocetestpack\ObjectSerializer;

/**
 * CreateSingleTransactionRequestFromAddressWithoutFeePriorityRI Class Doc Comment
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSingleTransactionRequestFromAddressWithoutFeePriorityRI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSingleTransactionRequestFromAddressWithoutFeePriorityRI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'classic_address' => 'string',
        'note' => 'string',
        'recipient' => '\kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRIRecipientInner[]',
        'sender' => '\kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRISender',
        'transaction_request_id' => 'string',
        'transaction_request_status' => 'string',
        'total_amount' => '\kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRITotalAmount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'classic_address' => null,
        'note' => null,
        'recipient' => null,
        'sender' => null,
        'transaction_request_id' => null,
        'transaction_request_status' => null,
        'total_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'classic_address' => false,
		'note' => false,
		'recipient' => false,
		'sender' => false,
		'transaction_request_id' => false,
		'transaction_request_status' => false,
		'total_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classic_address' => 'classicAddress',
        'note' => 'note',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'transaction_request_id' => 'transactionRequestId',
        'transaction_request_status' => 'transactionRequestStatus',
        'total_amount' => 'totalAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classic_address' => 'setClassicAddress',
        'note' => 'setNote',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'transaction_request_id' => 'setTransactionRequestId',
        'transaction_request_status' => 'setTransactionRequestStatus',
        'total_amount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classic_address' => 'getClassicAddress',
        'note' => 'getNote',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'transaction_request_id' => 'getTransactionRequestId',
        'transaction_request_status' => 'getTransactionRequestStatus',
        'total_amount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_REQUEST_STATUS_CREATED = 'created';
    public const TRANSACTION_REQUEST_STATUS_AWAIT_APPROVAL = 'await-approval';
    public const TRANSACTION_REQUEST_STATUS_PENDING = 'pending';
    public const TRANSACTION_REQUEST_STATUS_PREPARED = 'prepared';
    public const TRANSACTION_REQUEST_STATUS_SIGNED = 'signed';
    public const TRANSACTION_REQUEST_STATUS_BROADCASTED = 'broadcasted';
    public const TRANSACTION_REQUEST_STATUS_SUCCESS = 'success';
    public const TRANSACTION_REQUEST_STATUS_FAILED = 'failed';
    public const TRANSACTION_REQUEST_STATUS_REJECTED = 'rejected';
    public const TRANSACTION_REQUEST_STATUS_MINED = 'mined';
    public const TRANSACTION_REQUEST_STATUS_MINED_WITH_ERRORS = 'mined-with-errors';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionRequestStatusAllowableValues()
    {
        return [
            self::TRANSACTION_REQUEST_STATUS_CREATED,
            self::TRANSACTION_REQUEST_STATUS_AWAIT_APPROVAL,
            self::TRANSACTION_REQUEST_STATUS_PENDING,
            self::TRANSACTION_REQUEST_STATUS_PREPARED,
            self::TRANSACTION_REQUEST_STATUS_SIGNED,
            self::TRANSACTION_REQUEST_STATUS_BROADCASTED,
            self::TRANSACTION_REQUEST_STATUS_SUCCESS,
            self::TRANSACTION_REQUEST_STATUS_FAILED,
            self::TRANSACTION_REQUEST_STATUS_REJECTED,
            self::TRANSACTION_REQUEST_STATUS_MINED,
            self::TRANSACTION_REQUEST_STATUS_MINED_WITH_ERRORS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('classic_address', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('transaction_request_id', $data ?? [], null);
        $this->setIfExists('transaction_request_status', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['transaction_request_id'] === null) {
            $invalidProperties[] = "'transaction_request_id' can't be null";
        }
        if ($this->container['transaction_request_status'] === null) {
            $invalidProperties[] = "'transaction_request_status' can't be null";
        }
        $allowedValues = $this->getTransactionRequestStatusAllowableValues();
        if (!is_null($this->container['transaction_request_status']) && !in_array($this->container['transaction_request_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_request_status', must be one of '%s'",
                $this->container['transaction_request_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets classic_address
     *
     * @return string|null
     */
    public function getClassicAddress()
    {
        return $this->container['classic_address'];
    }

    /**
     * Sets classic_address
     *
     * @param string|null $classic_address Represents the public address, which is a compressed and shortened form of a public key. The classic address is shown when the source address is an x-Address.
     *
     * @return self
     */
    public function setClassicAddress($classic_address)
    {
        if (is_null($classic_address)) {
            throw new \InvalidArgumentException('non-nullable classic_address cannot be null');
        }
        $this->container['classic_address'] = $classic_address;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Represents an optional note to add a free text in, explaining or providing additional detail on the transaction request.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRIRecipientInner[]
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRIRecipientInner[] $recipient Defines the destination for the transaction, i.e. the recipient(s).
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRISender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRISender $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets transaction_request_id
     *
     * @return string
     */
    public function getTransactionRequestId()
    {
        return $this->container['transaction_request_id'];
    }

    /**
     * Sets transaction_request_id
     *
     * @param string $transaction_request_id Represents a unique identifier of the transaction request (the request sent to make a transaction), which helps in identifying which callback and which `referenceId` concern that specific transaction request.
     *
     * @return self
     */
    public function setTransactionRequestId($transaction_request_id)
    {
        if (is_null($transaction_request_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_request_id cannot be null');
        }
        $this->container['transaction_request_id'] = $transaction_request_id;

        return $this;
    }

    /**
     * Gets transaction_request_status
     *
     * @return string
     */
    public function getTransactionRequestStatus()
    {
        return $this->container['transaction_request_status'];
    }

    /**
     * Sets transaction_request_status
     *
     * @param string $transaction_request_status Defines the status of the transaction, e.g. \"created, \"await_approval\", \"pending\", \"prepared\", \"signed\", \"broadcasted\", \"success\", \"failed\", \"rejected\", mined\".
     *
     * @return self
     */
    public function setTransactionRequestStatus($transaction_request_status)
    {
        if (is_null($transaction_request_status)) {
            throw new \InvalidArgumentException('non-nullable transaction_request_status cannot be null');
        }
        $allowedValues = $this->getTransactionRequestStatusAllowableValues();
        if (!in_array($transaction_request_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_request_status', must be one of '%s'",
                    $transaction_request_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_request_status'] = $transaction_request_status;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRITotalAmount|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \kocetestpack\Model\CreateSingleTransactionRequestFromAddressWithoutFeePriorityRITotalAmount|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


