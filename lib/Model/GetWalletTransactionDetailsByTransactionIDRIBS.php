<?php
/**
 * GetWalletTransactionDetailsByTransactionIDRIBS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vaultody
 *
 * Vaultody
 *
 * The version of the OpenAPI document: 2023-04-20
 * Contact: developers@vaultody.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kocetestpack\Model;

use \ArrayAccess;
use \kocetestpack\ObjectSerializer;

/**
 * GetWalletTransactionDetailsByTransactionIDRIBS Class Doc Comment
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetWalletTransactionDetailsByTransactionIDRIBS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetWalletTransactionDetailsByTransactionIDRIBS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locktime' => 'int',
        'size' => 'int',
        'v_size' => 'int',
        'version' => 'int',
        'vin' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVinInner[]',
        'vout' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVoutInner[]',
        'contract' => 'string',
        'gas_limit' => 'string',
        'gas_price' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSBSCGasPrice',
        'gas_used' => 'string',
        'input_data' => 'string',
        'nonce' => 'int',
        'transaction_status' => 'string',
        'binding_sig' => 'string',
        'expiry_height' => 'int',
        'join_split_pub_key' => 'string',
        'join_split_sig' => 'string',
        'overwintered' => 'bool',
        'v_join_split' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVJoinSplitInner[]',
        'v_shielded_output' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner[]',
        'v_shielded_spend' => '\kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner[]',
        'value_balance' => 'string',
        'version_group_id' => 'string',
        'amount' => 'string',
        'bandwidth_used' => 'string',
        'energy_used' => 'string',
        'has_internal_transactions' => 'bool',
        'has_token_transfers' => 'bool',
        'input' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'locktime' => 'int64',
        'size' => null,
        'v_size' => null,
        'version' => null,
        'vin' => null,
        'vout' => null,
        'contract' => null,
        'gas_limit' => null,
        'gas_price' => null,
        'gas_used' => null,
        'input_data' => null,
        'nonce' => null,
        'transaction_status' => null,
        'binding_sig' => null,
        'expiry_height' => null,
        'join_split_pub_key' => null,
        'join_split_sig' => null,
        'overwintered' => null,
        'v_join_split' => null,
        'v_shielded_output' => null,
        'v_shielded_spend' => null,
        'value_balance' => null,
        'version_group_id' => null,
        'amount' => null,
        'bandwidth_used' => null,
        'energy_used' => null,
        'has_internal_transactions' => null,
        'has_token_transfers' => null,
        'input' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'locktime' => false,
		'size' => false,
		'v_size' => false,
		'version' => false,
		'vin' => false,
		'vout' => false,
		'contract' => false,
		'gas_limit' => false,
		'gas_price' => false,
		'gas_used' => false,
		'input_data' => false,
		'nonce' => false,
		'transaction_status' => false,
		'binding_sig' => false,
		'expiry_height' => false,
		'join_split_pub_key' => false,
		'join_split_sig' => false,
		'overwintered' => false,
		'v_join_split' => false,
		'v_shielded_output' => false,
		'v_shielded_spend' => false,
		'value_balance' => false,
		'version_group_id' => false,
		'amount' => false,
		'bandwidth_used' => false,
		'energy_used' => false,
		'has_internal_transactions' => false,
		'has_token_transfers' => false,
		'input' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locktime' => 'locktime',
        'size' => 'size',
        'v_size' => 'vSize',
        'version' => 'version',
        'vin' => 'vin',
        'vout' => 'vout',
        'contract' => 'contract',
        'gas_limit' => 'gasLimit',
        'gas_price' => 'gasPrice',
        'gas_used' => 'gasUsed',
        'input_data' => 'inputData',
        'nonce' => 'nonce',
        'transaction_status' => 'transactionStatus',
        'binding_sig' => 'bindingSig',
        'expiry_height' => 'expiryHeight',
        'join_split_pub_key' => 'joinSplitPubKey',
        'join_split_sig' => 'joinSplitSig',
        'overwintered' => 'overwintered',
        'v_join_split' => 'vJoinSplit',
        'v_shielded_output' => 'vShieldedOutput',
        'v_shielded_spend' => 'vShieldedSpend',
        'value_balance' => 'valueBalance',
        'version_group_id' => 'versionGroupId',
        'amount' => 'amount',
        'bandwidth_used' => 'bandwidthUsed',
        'energy_used' => 'energyUsed',
        'has_internal_transactions' => 'hasInternalTransactions',
        'has_token_transfers' => 'hasTokenTransfers',
        'input' => 'input',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locktime' => 'setLocktime',
        'size' => 'setSize',
        'v_size' => 'setVSize',
        'version' => 'setVersion',
        'vin' => 'setVin',
        'vout' => 'setVout',
        'contract' => 'setContract',
        'gas_limit' => 'setGasLimit',
        'gas_price' => 'setGasPrice',
        'gas_used' => 'setGasUsed',
        'input_data' => 'setInputData',
        'nonce' => 'setNonce',
        'transaction_status' => 'setTransactionStatus',
        'binding_sig' => 'setBindingSig',
        'expiry_height' => 'setExpiryHeight',
        'join_split_pub_key' => 'setJoinSplitPubKey',
        'join_split_sig' => 'setJoinSplitSig',
        'overwintered' => 'setOverwintered',
        'v_join_split' => 'setVJoinSplit',
        'v_shielded_output' => 'setVShieldedOutput',
        'v_shielded_spend' => 'setVShieldedSpend',
        'value_balance' => 'setValueBalance',
        'version_group_id' => 'setVersionGroupId',
        'amount' => 'setAmount',
        'bandwidth_used' => 'setBandwidthUsed',
        'energy_used' => 'setEnergyUsed',
        'has_internal_transactions' => 'setHasInternalTransactions',
        'has_token_transfers' => 'setHasTokenTransfers',
        'input' => 'setInput',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locktime' => 'getLocktime',
        'size' => 'getSize',
        'v_size' => 'getVSize',
        'version' => 'getVersion',
        'vin' => 'getVin',
        'vout' => 'getVout',
        'contract' => 'getContract',
        'gas_limit' => 'getGasLimit',
        'gas_price' => 'getGasPrice',
        'gas_used' => 'getGasUsed',
        'input_data' => 'getInputData',
        'nonce' => 'getNonce',
        'transaction_status' => 'getTransactionStatus',
        'binding_sig' => 'getBindingSig',
        'expiry_height' => 'getExpiryHeight',
        'join_split_pub_key' => 'getJoinSplitPubKey',
        'join_split_sig' => 'getJoinSplitSig',
        'overwintered' => 'getOverwintered',
        'v_join_split' => 'getVJoinSplit',
        'v_shielded_output' => 'getVShieldedOutput',
        'v_shielded_spend' => 'getVShieldedSpend',
        'value_balance' => 'getValueBalance',
        'version_group_id' => 'getVersionGroupId',
        'amount' => 'getAmount',
        'bandwidth_used' => 'getBandwidthUsed',
        'energy_used' => 'getEnergyUsed',
        'has_internal_transactions' => 'getHasInternalTransactions',
        'has_token_transfers' => 'getHasTokenTransfers',
        'input' => 'getInput',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('locktime', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('v_size', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('vin', $data ?? [], null);
        $this->setIfExists('vout', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('gas_limit', $data ?? [], null);
        $this->setIfExists('gas_price', $data ?? [], null);
        $this->setIfExists('gas_used', $data ?? [], null);
        $this->setIfExists('input_data', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('binding_sig', $data ?? [], null);
        $this->setIfExists('expiry_height', $data ?? [], null);
        $this->setIfExists('join_split_pub_key', $data ?? [], null);
        $this->setIfExists('join_split_sig', $data ?? [], null);
        $this->setIfExists('overwintered', $data ?? [], null);
        $this->setIfExists('v_join_split', $data ?? [], null);
        $this->setIfExists('v_shielded_output', $data ?? [], null);
        $this->setIfExists('v_shielded_spend', $data ?? [], null);
        $this->setIfExists('value_balance', $data ?? [], null);
        $this->setIfExists('version_group_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('bandwidth_used', $data ?? [], null);
        $this->setIfExists('energy_used', $data ?? [], null);
        $this->setIfExists('has_internal_transactions', $data ?? [], null);
        $this->setIfExists('has_token_transfers', $data ?? [], null);
        $this->setIfExists('input', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['locktime'] === null) {
            $invalidProperties[] = "'locktime' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['v_size'] === null) {
            $invalidProperties[] = "'v_size' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['vin'] === null) {
            $invalidProperties[] = "'vin' can't be null";
        }
        if ($this->container['vout'] === null) {
            $invalidProperties[] = "'vout' can't be null";
        }
        if ($this->container['contract'] === null) {
            $invalidProperties[] = "'contract' can't be null";
        }
        if ($this->container['gas_limit'] === null) {
            $invalidProperties[] = "'gas_limit' can't be null";
        }
        if ($this->container['gas_price'] === null) {
            $invalidProperties[] = "'gas_price' can't be null";
        }
        if ($this->container['gas_used'] === null) {
            $invalidProperties[] = "'gas_used' can't be null";
        }
        if ($this->container['input_data'] === null) {
            $invalidProperties[] = "'input_data' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ($this->container['transaction_status'] === null) {
            $invalidProperties[] = "'transaction_status' can't be null";
        }
        if ($this->container['binding_sig'] === null) {
            $invalidProperties[] = "'binding_sig' can't be null";
        }
        if ($this->container['expiry_height'] === null) {
            $invalidProperties[] = "'expiry_height' can't be null";
        }
        if ($this->container['join_split_pub_key'] === null) {
            $invalidProperties[] = "'join_split_pub_key' can't be null";
        }
        if ($this->container['join_split_sig'] === null) {
            $invalidProperties[] = "'join_split_sig' can't be null";
        }
        if ($this->container['overwintered'] === null) {
            $invalidProperties[] = "'overwintered' can't be null";
        }
        if ($this->container['value_balance'] === null) {
            $invalidProperties[] = "'value_balance' can't be null";
        }
        if ($this->container['version_group_id'] === null) {
            $invalidProperties[] = "'version_group_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['bandwidth_used'] === null) {
            $invalidProperties[] = "'bandwidth_used' can't be null";
        }
        if ($this->container['energy_used'] === null) {
            $invalidProperties[] = "'energy_used' can't be null";
        }
        if ($this->container['has_internal_transactions'] === null) {
            $invalidProperties[] = "'has_internal_transactions' can't be null";
        }
        if ($this->container['has_token_transfers'] === null) {
            $invalidProperties[] = "'has_token_transfers' can't be null";
        }
        if ($this->container['input'] === null) {
            $invalidProperties[] = "'input' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locktime
     *
     * @return int
     */
    public function getLocktime()
    {
        return $this->container['locktime'];
    }

    /**
     * Sets locktime
     *
     * @param int $locktime Represents the time at which a particular transaction can be added to the blockchain.
     *
     * @return self
     */
    public function setLocktime($locktime)
    {
        if (is_null($locktime)) {
            throw new \InvalidArgumentException('non-nullable locktime cannot be null');
        }
        $this->container['locktime'] = $locktime;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Represents the total size of this transaction.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets v_size
     *
     * @return int
     */
    public function getVSize()
    {
        return $this->container['v_size'];
    }

    /**
     * Sets v_size
     *
     * @param int $v_size Represents the virtual size of this transaction.
     *
     * @return self
     */
    public function setVSize($v_size)
    {
        if (is_null($v_size)) {
            throw new \InvalidArgumentException('non-nullable v_size cannot be null');
        }
        $this->container['v_size'] = $v_size;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Represents the transaction version number.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVinInner[]
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVinInner[] $vin Object Array representation of transaction inputs
     *
     * @return self
     */
    public function setVin($vin)
    {
        if (is_null($vin)) {
            throw new \InvalidArgumentException('non-nullable vin cannot be null');
        }
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets vout
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVoutInner[]
     */
    public function getVout()
    {
        return $this->container['vout'];
    }

    /**
     * Sets vout
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVoutInner[] $vout Object Array representation of transaction outputs
     *
     * @return self
     */
    public function setVout($vout)
    {
        if (is_null($vout)) {
            throw new \InvalidArgumentException('non-nullable vout cannot be null');
        }
        $this->container['vout'] = $vout;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return string
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param string $contract Numeric representation of the transaction contract
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return string
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param string $gas_limit Represents the amount of gas used by this specific transaction alone.
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        if (is_null($gas_limit)) {
            throw new \InvalidArgumentException('non-nullable gas_limit cannot be null');
        }
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_price
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSBSCGasPrice
     */
    public function getGasPrice()
    {
        return $this->container['gas_price'];
    }

    /**
     * Sets gas_price
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSBSCGasPrice $gas_price gas_price
     *
     * @return self
     */
    public function setGasPrice($gas_price)
    {
        if (is_null($gas_price)) {
            throw new \InvalidArgumentException('non-nullable gas_price cannot be null');
        }
        $this->container['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return string
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param string $gas_used Defines the unit of the gas price amount, e.g. BTC, ETH, XRP.
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        if (is_null($gas_used)) {
            throw new \InvalidArgumentException('non-nullable gas_used cannot be null');
        }
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets input_data
     *
     * @return string
     */
    public function getInputData()
    {
        return $this->container['input_data'];
    }

    /**
     * Sets input_data
     *
     * @param string $input_data Represents additional information that is required for the transaction.
     *
     * @return self
     */
    public function setInputData($input_data)
    {
        if (is_null($input_data)) {
            throw new \InvalidArgumentException('non-nullable input_data cannot be null');
        }
        $this->container['input_data'] = $input_data;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return int
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param int $nonce Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status String representation of the transaction status
     *
     * @return self
     */
    public function setTransactionStatus($transaction_status)
    {
        if (is_null($transaction_status)) {
            throw new \InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets binding_sig
     *
     * @return string
     */
    public function getBindingSig()
    {
        return $this->container['binding_sig'];
    }

    /**
     * Sets binding_sig
     *
     * @param string $binding_sig It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.
     *
     * @return self
     */
    public function setBindingSig($binding_sig)
    {
        if (is_null($binding_sig)) {
            throw new \InvalidArgumentException('non-nullable binding_sig cannot be null');
        }
        $this->container['binding_sig'] = $binding_sig;

        return $this;
    }

    /**
     * Gets expiry_height
     *
     * @return int
     */
    public function getExpiryHeight()
    {
        return $this->container['expiry_height'];
    }

    /**
     * Sets expiry_height
     *
     * @param int $expiry_height Represents a block height after which the transaction will expire.
     *
     * @return self
     */
    public function setExpiryHeight($expiry_height)
    {
        if (is_null($expiry_height)) {
            throw new \InvalidArgumentException('non-nullable expiry_height cannot be null');
        }
        $this->container['expiry_height'] = $expiry_height;

        return $this;
    }

    /**
     * Gets join_split_pub_key
     *
     * @return string
     */
    public function getJoinSplitPubKey()
    {
        return $this->container['join_split_pub_key'];
    }

    /**
     * Sets join_split_pub_key
     *
     * @param string $join_split_pub_key Represents an encoding of a JoinSplitSig public validating key.
     *
     * @return self
     */
    public function setJoinSplitPubKey($join_split_pub_key)
    {
        if (is_null($join_split_pub_key)) {
            throw new \InvalidArgumentException('non-nullable join_split_pub_key cannot be null');
        }
        $this->container['join_split_pub_key'] = $join_split_pub_key;

        return $this;
    }

    /**
     * Gets join_split_sig
     *
     * @return string
     */
    public function getJoinSplitSig()
    {
        return $this->container['join_split_sig'];
    }

    /**
     * Sets join_split_sig
     *
     * @param string $join_split_sig Is used to sign transactions that contain at least one JoinSplit description.
     *
     * @return self
     */
    public function setJoinSplitSig($join_split_sig)
    {
        if (is_null($join_split_sig)) {
            throw new \InvalidArgumentException('non-nullable join_split_sig cannot be null');
        }
        $this->container['join_split_sig'] = $join_split_sig;

        return $this;
    }

    /**
     * Gets overwintered
     *
     * @return bool
     */
    public function getOverwintered()
    {
        return $this->container['overwintered'];
    }

    /**
     * Sets overwintered
     *
     * @param bool $overwintered \"Overwinter\" is the network upgrade for the Zcash blockchain.
     *
     * @return self
     */
    public function setOverwintered($overwintered)
    {
        if (is_null($overwintered)) {
            throw new \InvalidArgumentException('non-nullable overwintered cannot be null');
        }
        $this->container['overwintered'] = $overwintered;

        return $this;
    }

    /**
     * Gets v_join_split
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVJoinSplitInner[]|null
     */
    public function getVJoinSplit()
    {
        return $this->container['v_join_split'];
    }

    /**
     * Sets v_join_split
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVJoinSplitInner[]|null $v_join_split Represents a sequence of JoinSplit descriptions using BCTV14 proofs.
     *
     * @return self
     */
    public function setVJoinSplit($v_join_split)
    {
        if (is_null($v_join_split)) {
            throw new \InvalidArgumentException('non-nullable v_join_split cannot be null');
        }
        $this->container['v_join_split'] = $v_join_split;

        return $this;
    }

    /**
     * Gets v_shielded_output
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner[]|null
     */
    public function getVShieldedOutput()
    {
        return $this->container['v_shielded_output'];
    }

    /**
     * Sets v_shielded_output
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner[]|null $v_shielded_output Object Array representation of transaction output descriptions
     *
     * @return self
     */
    public function setVShieldedOutput($v_shielded_output)
    {
        if (is_null($v_shielded_output)) {
            throw new \InvalidArgumentException('non-nullable v_shielded_output cannot be null');
        }
        $this->container['v_shielded_output'] = $v_shielded_output;

        return $this;
    }

    /**
     * Gets v_shielded_spend
     *
     * @return \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner[]|null
     */
    public function getVShieldedSpend()
    {
        return $this->container['v_shielded_spend'];
    }

    /**
     * Sets v_shielded_spend
     *
     * @param \kocetestpack\Model\GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner[]|null $v_shielded_spend Object Array representation of transaction spend descriptions
     *
     * @return self
     */
    public function setVShieldedSpend($v_shielded_spend)
    {
        if (is_null($v_shielded_spend)) {
            throw new \InvalidArgumentException('non-nullable v_shielded_spend cannot be null');
        }
        $this->container['v_shielded_spend'] = $v_shielded_spend;

        return $this;
    }

    /**
     * Gets value_balance
     *
     * @return string
     */
    public function getValueBalance()
    {
        return $this->container['value_balance'];
    }

    /**
     * Sets value_balance
     *
     * @param string $value_balance String representation of the transaction value balance
     *
     * @return self
     */
    public function setValueBalance($value_balance)
    {
        if (is_null($value_balance)) {
            throw new \InvalidArgumentException('non-nullable value_balance cannot be null');
        }
        $this->container['value_balance'] = $value_balance;

        return $this;
    }

    /**
     * Gets version_group_id
     *
     * @return string
     */
    public function getVersionGroupId()
    {
        return $this->container['version_group_id'];
    }

    /**
     * Sets version_group_id
     *
     * @param string $version_group_id Represents the transaction version group ID.
     *
     * @return self
     */
    public function setVersionGroupId($version_group_id)
    {
        if (is_null($version_group_id)) {
            throw new \InvalidArgumentException('non-nullable version_group_id cannot be null');
        }
        $this->container['version_group_id'] = $version_group_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount String representation of the amount value
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bandwidth_used
     *
     * @return string
     */
    public function getBandwidthUsed()
    {
        return $this->container['bandwidth_used'];
    }

    /**
     * Sets bandwidth_used
     *
     * @param string $bandwidth_used Numeric representation of the transaction used bandwidth
     *
     * @return self
     */
    public function setBandwidthUsed($bandwidth_used)
    {
        if (is_null($bandwidth_used)) {
            throw new \InvalidArgumentException('non-nullable bandwidth_used cannot be null');
        }
        $this->container['bandwidth_used'] = $bandwidth_used;

        return $this;
    }

    /**
     * Gets energy_used
     *
     * @return string
     */
    public function getEnergyUsed()
    {
        return $this->container['energy_used'];
    }

    /**
     * Sets energy_used
     *
     * @param string $energy_used String representation of the transaction used energy
     *
     * @return self
     */
    public function setEnergyUsed($energy_used)
    {
        if (is_null($energy_used)) {
            throw new \InvalidArgumentException('non-nullable energy_used cannot be null');
        }
        $this->container['energy_used'] = $energy_used;

        return $this;
    }

    /**
     * Gets has_internal_transactions
     *
     * @return bool
     */
    public function getHasInternalTransactions()
    {
        return $this->container['has_internal_transactions'];
    }

    /**
     * Sets has_internal_transactions
     *
     * @param bool $has_internal_transactions has_internal_transactions
     *
     * @return self
     */
    public function setHasInternalTransactions($has_internal_transactions)
    {
        if (is_null($has_internal_transactions)) {
            throw new \InvalidArgumentException('non-nullable has_internal_transactions cannot be null');
        }
        $this->container['has_internal_transactions'] = $has_internal_transactions;

        return $this;
    }

    /**
     * Gets has_token_transfers
     *
     * @return bool
     */
    public function getHasTokenTransfers()
    {
        return $this->container['has_token_transfers'];
    }

    /**
     * Sets has_token_transfers
     *
     * @param bool $has_token_transfers has_token_transfers
     *
     * @return self
     */
    public function setHasTokenTransfers($has_token_transfers)
    {
        if (is_null($has_token_transfers)) {
            throw new \InvalidArgumentException('non-nullable has_token_transfers cannot be null');
        }
        $this->container['has_token_transfers'] = $has_token_transfers;

        return $this;
    }

    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input Numeric representation of the transaction input
     *
     * @return self
     */
    public function setInput($input)
    {
        if (is_null($input)) {
            throw new \InvalidArgumentException('non-nullable input cannot be null');
        }
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status String representation of the transaction status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


