<?php
/**
 * GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vaultody
 *
 * Vaultody
 *
 * The version of the OpenAPI document: 2023-04-20
 * Contact: developers@vaultody.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kocetestpack\Model;

use \ArrayAccess;
use \kocetestpack\ObjectSerializer;

/**
 * GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner Class Doc Comment
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetWalletTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetWalletTransactionDetailsByTransactionIDRIBSZ_vShieldedSpend_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anchor' => 'string',
        'cv' => 'string',
        'nullifier' => 'string',
        'proof' => 'string',
        'rk' => 'string',
        'spend_auth_sig' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anchor' => null,
        'cv' => null,
        'nullifier' => null,
        'proof' => null,
        'rk' => null,
        'spend_auth_sig' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'anchor' => false,
		'cv' => false,
		'nullifier' => false,
		'proof' => false,
		'rk' => false,
		'spend_auth_sig' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anchor' => 'anchor',
        'cv' => 'cv',
        'nullifier' => 'nullifier',
        'proof' => 'proof',
        'rk' => 'rk',
        'spend_auth_sig' => 'spendAuthSig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anchor' => 'setAnchor',
        'cv' => 'setCv',
        'nullifier' => 'setNullifier',
        'proof' => 'setProof',
        'rk' => 'setRk',
        'spend_auth_sig' => 'setSpendAuthSig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anchor' => 'getAnchor',
        'cv' => 'getCv',
        'nullifier' => 'getNullifier',
        'proof' => 'getProof',
        'rk' => 'getRk',
        'spend_auth_sig' => 'getSpendAuthSig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('anchor', $data ?? [], null);
        $this->setIfExists('cv', $data ?? [], null);
        $this->setIfExists('nullifier', $data ?? [], null);
        $this->setIfExists('proof', $data ?? [], null);
        $this->setIfExists('rk', $data ?? [], null);
        $this->setIfExists('spend_auth_sig', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['anchor'] === null) {
            $invalidProperties[] = "'anchor' can't be null";
        }
        if ($this->container['cv'] === null) {
            $invalidProperties[] = "'cv' can't be null";
        }
        if ($this->container['nullifier'] === null) {
            $invalidProperties[] = "'nullifier' can't be null";
        }
        if ($this->container['proof'] === null) {
            $invalidProperties[] = "'proof' can't be null";
        }
        if ($this->container['rk'] === null) {
            $invalidProperties[] = "'rk' can't be null";
        }
        if ($this->container['spend_auth_sig'] === null) {
            $invalidProperties[] = "'spend_auth_sig' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anchor
     *
     * @return string
     */
    public function getAnchor()
    {
        return $this->container['anchor'];
    }

    /**
     * Sets anchor
     *
     * @param string $anchor Defines a Merkle tree root of a note commitment tree which uniquely identifies a note commitment tree state given the assumed security properties of the Merkle treeâ€™s  hash function.
     *
     * @return self
     */
    public function setAnchor($anchor)
    {
        if (is_null($anchor)) {
            throw new \InvalidArgumentException('non-nullable anchor cannot be null');
        }
        $this->container['anchor'] = $anchor;

        return $this;
    }

    /**
     * Gets cv
     *
     * @return string
     */
    public function getCv()
    {
        return $this->container['cv'];
    }

    /**
     * Sets cv
     *
     * @param string $cv Defines a value commitment to the value of the input note.
     *
     * @return self
     */
    public function setCv($cv)
    {
        if (is_null($cv)) {
            throw new \InvalidArgumentException('non-nullable cv cannot be null');
        }
        $this->container['cv'] = $cv;

        return $this;
    }

    /**
     * Gets nullifier
     *
     * @return string
     */
    public function getNullifier()
    {
        return $this->container['nullifier'];
    }

    /**
     * Sets nullifier
     *
     * @param string $nullifier Represents a sequence of nullifiers of the input notes.
     *
     * @return self
     */
    public function setNullifier($nullifier)
    {
        if (is_null($nullifier)) {
            throw new \InvalidArgumentException('non-nullable nullifier cannot be null');
        }
        $this->container['nullifier'] = $nullifier;

        return $this;
    }

    /**
     * Gets proof
     *
     * @return string
     */
    public function getProof()
    {
        return $this->container['proof'];
    }

    /**
     * Sets proof
     *
     * @param string $proof Represents the proof.
     *
     * @return self
     */
    public function setProof($proof)
    {
        if (is_null($proof)) {
            throw new \InvalidArgumentException('non-nullable proof cannot be null');
        }
        $this->container['proof'] = $proof;

        return $this;
    }

    /**
     * Gets rk
     *
     * @return string
     */
    public function getRk()
    {
        return $this->container['rk'];
    }

    /**
     * Sets rk
     *
     * @param string $rk Represents the randomized validating key for spendAuthSig.
     *
     * @return self
     */
    public function setRk($rk)
    {
        if (is_null($rk)) {
            throw new \InvalidArgumentException('non-nullable rk cannot be null');
        }
        $this->container['rk'] = $rk;

        return $this;
    }

    /**
     * Gets spend_auth_sig
     *
     * @return string
     */
    public function getSpendAuthSig()
    {
        return $this->container['spend_auth_sig'];
    }

    /**
     * Sets spend_auth_sig
     *
     * @param string $spend_auth_sig Used to prove knowledge of the spending key authorizing spending of an input note.
     *
     * @return self
     */
    public function setSpendAuthSig($spend_auth_sig)
    {
        if (is_null($spend_auth_sig)) {
            throw new \InvalidArgumentException('non-nullable spend_auth_sig cannot be null');
        }
        $this->container['spend_auth_sig'] = $spend_auth_sig;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


