<?php
/**
 * GeneratingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vaultody
 *
 * Vaultody
 *
 * The version of the OpenAPI document: 2023-04-20
 * Contact: developers@vaultody.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kocetestpack\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use kocetestpack\ApiException;
use kocetestpack\Configuration;
use kocetestpack\HeaderSelector;
use kocetestpack\ObjectSerializer;

/**
 * GeneratingApi Class Doc Comment
 *
 * @category Class
 * @package  kocetestpack
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeneratingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewMasterWallet' => [
            'application/json',
        ],
        'generateDepositAddress' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewMasterWallet
     *
     * Create New Master Wallet
     *
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\CreateNewMasterWalletRB $create_new_master_wallet_rb create_new_master_wallet_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewMasterWallet'] to see the possible values for this operation
     *
     * @throws \kocetestpack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \kocetestpack\Model\CreateNewMasterWalletR|\kocetestpack\Model\CreateNewMasterWallet400Response|\kocetestpack\Model\CreateNewMasterWallet401Response|\kocetestpack\Model\CreateNewMasterWallet402Response|\kocetestpack\Model\CreateNewMasterWallet403Response|\kocetestpack\Model\CreateNewMasterWallet409Response|\kocetestpack\Model\CreateNewMasterWallet415Response|\kocetestpack\Model\CreateNewMasterWallet422Response|\kocetestpack\Model\CreateNewMasterWallet429Response|\kocetestpack\Model\CreateNewMasterWallet500Response
     */
    public function createNewMasterWallet($context = null, $create_new_master_wallet_rb = null, string $contentType = self::contentTypes['createNewMasterWallet'][0])
    {
        list($response) = $this->createNewMasterWalletWithHttpInfo($context, $create_new_master_wallet_rb, $contentType);
        return $response;
    }

    /**
     * Operation createNewMasterWalletWithHttpInfo
     *
     * Create New Master Wallet
     *
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\CreateNewMasterWalletRB $create_new_master_wallet_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewMasterWallet'] to see the possible values for this operation
     *
     * @throws \kocetestpack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \kocetestpack\Model\CreateNewMasterWalletR|\kocetestpack\Model\CreateNewMasterWallet400Response|\kocetestpack\Model\CreateNewMasterWallet401Response|\kocetestpack\Model\CreateNewMasterWallet402Response|\kocetestpack\Model\CreateNewMasterWallet403Response|\kocetestpack\Model\CreateNewMasterWallet409Response|\kocetestpack\Model\CreateNewMasterWallet415Response|\kocetestpack\Model\CreateNewMasterWallet422Response|\kocetestpack\Model\CreateNewMasterWallet429Response|\kocetestpack\Model\CreateNewMasterWallet500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewMasterWalletWithHttpInfo($context = null, $create_new_master_wallet_rb = null, string $contentType = self::contentTypes['createNewMasterWallet'][0])
    {
        $request = $this->createNewMasterWalletRequest($context, $create_new_master_wallet_rb, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\kocetestpack\Model\CreateNewMasterWalletR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWalletR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWalletR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\kocetestpack\Model\CreateNewMasterWallet400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\kocetestpack\Model\CreateNewMasterWallet401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\kocetestpack\Model\CreateNewMasterWallet402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet402Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\kocetestpack\Model\CreateNewMasterWallet403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\kocetestpack\Model\CreateNewMasterWallet409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet409Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\kocetestpack\Model\CreateNewMasterWallet415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet415Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\kocetestpack\Model\CreateNewMasterWallet422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\kocetestpack\Model\CreateNewMasterWallet429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet429Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\kocetestpack\Model\CreateNewMasterWallet500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kocetestpack\Model\CreateNewMasterWalletR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWalletR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewMasterWalletAsync
     *
     * Create New Master Wallet
     *
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\CreateNewMasterWalletRB $create_new_master_wallet_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewMasterWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewMasterWalletAsync($context = null, $create_new_master_wallet_rb = null, string $contentType = self::contentTypes['createNewMasterWallet'][0])
    {
        return $this->createNewMasterWalletAsyncWithHttpInfo($context, $create_new_master_wallet_rb, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewMasterWalletAsyncWithHttpInfo
     *
     * Create New Master Wallet
     *
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\CreateNewMasterWalletRB $create_new_master_wallet_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewMasterWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewMasterWalletAsyncWithHttpInfo($context = null, $create_new_master_wallet_rb = null, string $contentType = self::contentTypes['createNewMasterWallet'][0])
    {
        $returnType = '\kocetestpack\Model\CreateNewMasterWalletR';
        $request = $this->createNewMasterWalletRequest($context, $create_new_master_wallet_rb, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewMasterWallet'
     *
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\CreateNewMasterWalletRB $create_new_master_wallet_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewMasterWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewMasterWalletRequest($context = null, $create_new_master_wallet_rb = null, string $contentType = self::contentTypes['createNewMasterWallet'][0])
    {




        $resourcePath = '/wallet-as-a-service/wallets/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_master_wallet_rb)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_master_wallet_rb));
            } else {
                $httpBody = $create_new_master_wallet_rb;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-sign');
        if ($apiKey !== null) {
            $headers['x-api-sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-passphrase');
        if ($apiKey !== null) {
            $headers['x-api-passphrase'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-timestamp');
        if ($apiKey !== null) {
            $headers['x-api-timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateDepositAddress
     *
     * Generate Deposit Address
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $wallet_id Represents the unique ID of the specific Wallet. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\GenerateDepositAddressRB $generate_deposit_address_rb generate_deposit_address_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateDepositAddress'] to see the possible values for this operation
     *
     * @throws \kocetestpack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \kocetestpack\Model\GenerateDepositAddressR|\kocetestpack\Model\GenerateDepositAddress400Response|\kocetestpack\Model\GenerateDepositAddress401Response|\kocetestpack\Model\CreateNewMasterWallet402Response|\kocetestpack\Model\GenerateDepositAddress403Response|\kocetestpack\Model\ListDepositAddresses404Response|\kocetestpack\Model\CreateNewMasterWallet409Response|\kocetestpack\Model\CreateNewMasterWallet415Response|\kocetestpack\Model\CreateNewMasterWallet422Response|\kocetestpack\Model\CreateNewMasterWallet429Response|\kocetestpack\Model\CreateNewMasterWallet500Response
     */
    public function generateDepositAddress($blockchain, $network, $wallet_id, $context = null, $generate_deposit_address_rb = null, string $contentType = self::contentTypes['generateDepositAddress'][0])
    {
        list($response) = $this->generateDepositAddressWithHttpInfo($blockchain, $network, $wallet_id, $context, $generate_deposit_address_rb, $contentType);
        return $response;
    }

    /**
     * Operation generateDepositAddressWithHttpInfo
     *
     * Generate Deposit Address
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $wallet_id Represents the unique ID of the specific Wallet. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\GenerateDepositAddressRB $generate_deposit_address_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateDepositAddress'] to see the possible values for this operation
     *
     * @throws \kocetestpack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \kocetestpack\Model\GenerateDepositAddressR|\kocetestpack\Model\GenerateDepositAddress400Response|\kocetestpack\Model\GenerateDepositAddress401Response|\kocetestpack\Model\CreateNewMasterWallet402Response|\kocetestpack\Model\GenerateDepositAddress403Response|\kocetestpack\Model\ListDepositAddresses404Response|\kocetestpack\Model\CreateNewMasterWallet409Response|\kocetestpack\Model\CreateNewMasterWallet415Response|\kocetestpack\Model\CreateNewMasterWallet422Response|\kocetestpack\Model\CreateNewMasterWallet429Response|\kocetestpack\Model\CreateNewMasterWallet500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateDepositAddressWithHttpInfo($blockchain, $network, $wallet_id, $context = null, $generate_deposit_address_rb = null, string $contentType = self::contentTypes['generateDepositAddress'][0])
    {
        $request = $this->generateDepositAddressRequest($blockchain, $network, $wallet_id, $context, $generate_deposit_address_rb, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\kocetestpack\Model\GenerateDepositAddressR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\GenerateDepositAddressR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\GenerateDepositAddressR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\kocetestpack\Model\GenerateDepositAddress400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\GenerateDepositAddress400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\GenerateDepositAddress400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\kocetestpack\Model\GenerateDepositAddress401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\GenerateDepositAddress401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\GenerateDepositAddress401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\kocetestpack\Model\CreateNewMasterWallet402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet402Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\kocetestpack\Model\GenerateDepositAddress403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\GenerateDepositAddress403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\GenerateDepositAddress403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\kocetestpack\Model\ListDepositAddresses404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\ListDepositAddresses404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\ListDepositAddresses404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\kocetestpack\Model\CreateNewMasterWallet409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet409Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\kocetestpack\Model\CreateNewMasterWallet415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet415Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\kocetestpack\Model\CreateNewMasterWallet422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\kocetestpack\Model\CreateNewMasterWallet429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet429Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\kocetestpack\Model\CreateNewMasterWallet500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kocetestpack\Model\CreateNewMasterWallet500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kocetestpack\Model\CreateNewMasterWallet500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kocetestpack\Model\GenerateDepositAddressR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\GenerateDepositAddressR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\GenerateDepositAddress400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\GenerateDepositAddress401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\GenerateDepositAddress403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\ListDepositAddresses404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kocetestpack\Model\CreateNewMasterWallet500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateDepositAddressAsync
     *
     * Generate Deposit Address
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $wallet_id Represents the unique ID of the specific Wallet. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\GenerateDepositAddressRB $generate_deposit_address_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateDepositAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateDepositAddressAsync($blockchain, $network, $wallet_id, $context = null, $generate_deposit_address_rb = null, string $contentType = self::contentTypes['generateDepositAddress'][0])
    {
        return $this->generateDepositAddressAsyncWithHttpInfo($blockchain, $network, $wallet_id, $context, $generate_deposit_address_rb, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateDepositAddressAsyncWithHttpInfo
     *
     * Generate Deposit Address
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $wallet_id Represents the unique ID of the specific Wallet. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\GenerateDepositAddressRB $generate_deposit_address_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateDepositAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateDepositAddressAsyncWithHttpInfo($blockchain, $network, $wallet_id, $context = null, $generate_deposit_address_rb = null, string $contentType = self::contentTypes['generateDepositAddress'][0])
    {
        $returnType = '\kocetestpack\Model\GenerateDepositAddressR';
        $request = $this->generateDepositAddressRequest($blockchain, $network, $wallet_id, $context, $generate_deposit_address_rb, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateDepositAddress'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $wallet_id Represents the unique ID of the specific Wallet. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  \kocetestpack\Model\GenerateDepositAddressRB $generate_deposit_address_rb (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateDepositAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateDepositAddressRequest($blockchain, $network, $wallet_id, $context = null, $generate_deposit_address_rb = null, string $contentType = self::contentTypes['generateDepositAddress'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling generateDepositAddress'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling generateDepositAddress'
            );
        }

        // verify the required parameter 'wallet_id' is set
        if ($wallet_id === null || (is_array($wallet_id) && count($wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_id when calling generateDepositAddress'
            );
        }




        $resourcePath = '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($wallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($wallet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generate_deposit_address_rb)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generate_deposit_address_rb));
            } else {
                $httpBody = $generate_deposit_address_rb;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-sign');
        if ($apiKey !== null) {
            $headers['x-api-sign'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-passphrase');
        if ($apiKey !== null) {
            $headers['x-api-passphrase'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-timestamp');
        if ($apiKey !== null) {
            $headers['x-api-timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
